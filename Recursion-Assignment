Q1 : Given an integer, find out the sum of its digits using recursion.
Input: n= 1234
Output: 10
Explanation: 1+2+3+4=10

solution:-
public class SumOfDigits {
    public static int sum(int n)
    {if(n==0)
        {
            return 0;
        }
        int digit=n%10;
        int m=n/10;
        return digit+sum(m);

    }
    public static void main(String[] args) {
       int r= sum(123);
       System.out.println(r);
        
    }
}


Q2: Given a number n. Find the sum of natural numbers till n but with alternate signs.
That means if n = 5 then you have to return 1-2+3-4+5 = 3 as your answer.
Constraints : 0<=n<=1e6
Input1 : n = 10
Output 1 : -5
Explanation : 1-2+3-4+5-6+7-8+9-10 = -5
Input 2 : n = 5
Output 2 : 3

solution:-
public class AlternateSum {
    public static int alternate(int n) {

        if (n == 0) {
            return 0;
        }
        int m = 0;
        if (n % 2 == 0) {
            m = n * (-1);
        } else {
            m = n * 1;
        }

        return m + alternate(n - 1);

    }

    public static void main(String[] args) {
        int r = alternate(10);
        System.out.println(r);
    }
}

Q3: Print the max value of the array [ 13, 1, -3, 22, 5].
solution:-
public class MaxValueArray {
    public static int maxValue(int[]arr,int index)
    {if (index == arr.length - 1) {
        return arr[index]; // Base case: return the last element when index reaches end of array
    }

    int maxInRest = maxValue(arr, index + 1); // Recursive call to find maximum in the rest of the array
    return Math.max(arr[index], maxInRest);

    }
    public static void main(String[] args) {
        int arr[]={ 13, 1, -3, 22, 5};
       
       System.out.println( maxValue(arr,0));
    }
    
}


Q4 : Find the sum of the values of the array [92, 23, 15, -20, 10].
solution:-
public class SumArrays {
    public static int sumArray(int[] arr, int i) {
    if(i==arr.length)
    {
        return 0;
    }
    return arr[i]+sumArray(arr, i+1);
        
    }

    public static void main(String[] args) {
        int arr[] = { 92, 23, 15, -20, 10 };
        System.out.println(sumArray(arr, 0));
    }

}

Q5. Given a number n. Print if it is an armstrong number or not. An armstrong number is a number if the sum
of every digit in that number raised to the power of total digits in that number is equal to the number.
Example : 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 hence 153 is an armstrong number. (Easy)
Input1 : 153
Output1 : Yes
Input 2 : 134
Output2 : No

solution:-
public class ArmstrongNumber {
    public static boolean isArmstrong(int n, int digits) {
        if (check(n, digits) == n) {
            return true;
        } else {
            return false;
        }

    }

    public static int check(int n, int digits) {
        if (n == 0) {
            return 0;
        }
        int d = n % 10;
        n = n / 10;
        return (int) Math.pow(d, digits) + check(n, digits);
    }

    public static void main(String[] args) {
        int n = 154;
        int digits = (int) Math.log10(n) + 1;

        System.out.println(isArmstrong(n, digits));
    }

}

