Compile-time Errors:
These errors occur during the compilation of your Java program. They are also known as compilation errors or syntax errors because they are related to the syntax and structure of your code. Compile-time errors prevent the program from being successfully compiled and, therefore, cannot be executed until they are fixed. Common examples include missing semicolons, undeclared variables, and incorrect method or class definitions.
Runtime Errors (Exceptions):
Runtime errors, also known as exceptions, occur while a program is running. These errors are often caused by unexpected conditions or invalid operations during program execution. Java provides a mechanism for handling exceptions using try-catch blocks.
Logical Errors (Bugs):
Logical errors, also known as bugs, are the most challenging type of errors to detect and fix. These errors occur when your code does not produce the expected output or behaves incorrectly due to flawed logic or algorithmic mistakes. The program may run without any exceptions or compile-time errors, but the result is not as intended.

(2)Here are some key points about exceptions in Java:
Types of Exceptions: Exceptions in Java are represented as objects belonging to classes that inherit from the Throwable class. There are two main types of exceptions:
Checked Exceptions: These are exceptions that the Java compiler forces you to handle explicitly using try-catch blocks or declare with a throws clause in the method signature. Checked exceptions typically represent recoverable errors, such as file not found or network connection issues.
Unchecked Exceptions (Runtime Exceptions):
Unchecked exceptions, also known as runtime exceptions, do not need to be explicitly declared or caught. 
Handling Exceptions:
To handle exceptions in Java, you can use try-catch blocks. The try block contains the code that may throw an exception, and the catch block contains code to handle the exception if it occurs.

(3)In Java, you can handle exceptions using try-catch blocks. A try block contains the code that may throw an exception, and a catch block specifies how to handle that exception if it occurs
for example;--
public class ExceptionHandlingExample {

    public static void main(String[] args) {
        try {
       int result = divide(10, 0);
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
                System.out.println("An arithmetic exception occurred: " + e.getMessage());
        }
           System.out.println("Program continues after exception handling.");
    }
    public static int divide(int numerator, int denominator) {
        return numerator / denominator;
    }
}
Here's how the program works:
(a) We have a try block that contains the code where the exception might occur.
(b) inside the try block, we call the divide method with the arguments 10 and 0. Since dividing by zero is not allowed, an ArithmeticException will be thrown.
(c)fter handling the exception, the program continues executing the code outside the catch block. In this case, it prints "Program continues after exception handling."

(4)Exception handling in Java is a crucial aspect of writing robust and reliable software. It allows you to gracefully handle unexpected or exceptional situations that can occur during the execution of a program. Here are some reasons why exceptional handling is necessary in Java:

(a)Error Handling: Exception handling helps you deal with errors and exceptional conditions that may arise during program execution. These errors could be due to unexpected input, external factors, or system issues.
(b)Graceful Recovery: Exception handling enables you to recover gracefully from exceptions rather than letting the program crash abruptly. This can enhance the user experience by providing informative error messages and allowing the program to continue functioning when possible.
(c)Maintainability: Properly handled exceptions can make your code more maintainable. By encapsulating error-handling logic in exception-handling blocks, you separate it from the main application logic, making your code easier to read and maintain.
(d)Security: Exception handling can be used to handle security-related issues, such as unauthorized access or invalid input, by throwing and catching specific exceptions to handle these cases appropriately.
(e)Business Logic: Exception handling allows you to define and manage business-specific exceptions, making it easier to handle domain-specific errors or conditions unique to your application.
(f)Predictability: Handling exceptions provides a way to predict and manage potential errors, making your code more robust and predictable. Without proper exception handling, your program's behavior in exceptional situations may be unpredictable.

(5)n Java, both exceptions and errors are types of Throwable objects, but they serve different purposes and have distinct characteristics:

(A) Exceptions:

*Exceptions in Java are events or conditions that can occur during the execution of a program but are not necessarily fatal or severe.
*They are typically caused by issues that can be handled and recovered from, such as invalid input, network problems, or file not found.
*Exceptions are meant to be caught and handled by the programmer to ensure that the program can continue running without terminating abruptly.
*Exceptions are further divided into two categories: checked exceptions and unchecked exceptions. Checked exceptions must be either caught (using try-catch blocks) or declared in the method signature using the "throws" keyword. Unchecked exceptions (usually subclasses of RuntimeException) do not require such handling or declaration.

(B) Errors:

Errors, on the other hand, represent severe and typically unrecoverable issues that occur at runtime. They are not meant to be caught or handled by the application code.
Errors are often caused by external factors that the application has no control over, such as hardware failures, out-of-memory conditions, or stack overflow errors.
When an error occurs, it usually indicates a serious problem in the environment or setup of the Java Virtual Machine (JVM), and trying to recover from an error is not advisable because it may lead to unpredictable behavior.
Common examples of errors in Java include java.lang.OutOfMemoryError, java.lang.StackOverflowError, and java.lang.VirtualMachineError.

In summary, exceptions are used to handle expected and recoverable issues in your Java code, while errors are used to represent unexpected and usually unrecoverable problems that are typically outside the control of your application

(6)n Java, exceptions are categorized into two main types: checked exceptions and unchecked exceptions. Each of these categories has various subclasses representing specific types of exceptions. Here are some common types of exceptions in Java:

(a) Checked Exceptions:

These exceptions are checked at compile time, meaning the Java compiler requires you to either catch them using try-catch blocks or declare them in the method's throws clause.
(b) Unchecked Exceptions 
(RuntimeException and its subclasses):

These exceptions are not checked at compile time, and you are not required to catch or declare them.
Errors:

(c) Errors represent severe and typically unrecoverable issues that are usually outside the control of your application. 
It's important to understand these different types of exceptions in Java and handle them appropriately in your code. Checked exceptions should be handled or declared, while unchecked exceptions should be prevented through proper programming practices, and errors should be reported and addressed at the system level.

(7) No, you cannot use just a try block without either a catch block or a finally block in Java. The try block is used to enclose code that may potentially throw exceptions, but you need either a catch block or a finally block (or both) to handle or clean up after those exceptions.
Here's a brief explanation of each:
(a) try: The try block is used to enclose the code that might throw exceptions. If an exception occurs within the try block, it is typically propagated to the nearest catch block for handling. If there is no catch block, the exception can be caught further up the call stack or may cause the program to terminate.

(b) catch: The catch block is used to specify how to handle exceptions that occur within the try block. It contains code that is executed when a specific type of exception is thrown. You can have multiple catch blocks to handle different types of exceptions.

(c) finally: The finally block is used for code that should be executed regardless of whether an exception was thrown or not. It is often used for cleanup operations, such as closing files or releasing resources. The finally block will execute even if there is no matching catch block for an exception.
Here's a simple example of how you might use a try, catch, and finally block:
try {
    int result = 10 / 0;
} catch (ArithmeticException e) {
    System.out.println("An ArithmeticException occurred: " + e.getMessage());
} finally {
    System.out.println("Finally block executed.");
}
In this example, the try block contains code that can throw an ArithmeticException. If this exception occurs, it is caught by the catch block, which handles it by printing a message. Regardless of whether an exception is thrown or caught, the finally block will always execute and print its message. This ensures that any cleanup or finalization tasks are performed as needed.





ASSIGNMENT 2nd

(1) In Java 8, lambda expressions were introduced as a new way to represent anonymous functions or methods. Lambda expressions provide a concise way to define implementations for functional interfaces (interfaces with a single abstract method) directly in your code.
Here are some examples of lambda expressions in Java 8:
* A lambda expression that takes no parameters and returns a constant value:
() -> 42
* A lambda expression that takes two integer parameters and returns their sum:
(int a, int b) -> a + b
* A lambda expression that takes a single string parameter and prints it:
(String message) -> System.out.println(message)

Lambda expressions are commonly used when working with functional interfaces like Runnable, Callable, and various interfaces in the Java Collections Framework, where you need to provide an implementation for a single abstract method. They make the code more concise and readable for certain use cases.

(2) Yes, you can pass lambda expressions as arguments to methods in Java. This is a powerful feature introduced in Java 8 that allows you to write more flexible and expressive code. Lambda expressions can be passed as arguments when you want to:

Customize Behavior: You can pass different behaviors to a method by using lambda expressions as arguments. This is often used to customize how a method operates without the need to create multiple implementations of interfaces or classes.

Implement Callbacks: Lambda expressions can be used to define callbacks that are executed by a method when specific events or conditions occur.

Simplify Code: Lambda expressions can make your code more concise and readable, especially when you need to pass short, one-off pieces of logic to a method.




